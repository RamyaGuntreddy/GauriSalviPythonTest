Find the Lowest Common Ancestor of two given nodes in a Binary Search Tree

1.Start will the root.
2.If root>n1 and root>n2 then lowest common ancestor will be in left subtree.
3.If root<n1 and root<n2 then lowest common ancestor will be in right subtree.
4.If Step 2 and Step 3 is false then we are at the root which is lowest common ancestor, return it.

Solution:
# A binary tree node 
class Node: 
	
	# Constructor to create a new tree node 
	def __init__(self, key): 
		self.key = key 
		self.left = None
		self.right = None
	 
def LCA(root, n1, n2): 
    
	if root is None: 
		return None

	if root.key == n1 or root.key == n2: 
		return root 

	left_lca = LCA(root.left, n1, n2) 
	right_lca = LCA(root.right, n1, n2) 

	if left_lca and right_lca: 
		return root 

	return left_lca if left_lca is not None else right_lca 

root = Node(2) 
root.left = Node(1) 
root.right = Node(3)
root.right.left = Node(4) 
root.right.right = Node(5) 
root.right.right.right = Node(6)  

print(LCA(root, 1, 5).key)
print(LCA(root, 4, 6).key)

Output:
2
3
